<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.interest.dao.RoleDao">
    <resultMap id="roleMap" type="com.interest.model.RoleEntity">
        <id column="id" property="id"/>
        <result column="role" property="role"/>
        <result column="name" property="name"/>
        <result column="modules" property="modules"/>
        <result column="describe" property="describe"/>
    </resultMap>
    <!-- 获取role列表 -->
    <select id="rolesList" resultMap="roleMap">
        <![CDATA[select * from oauth_role]]>
        <![CDATA[ order by id ]]>
        <if test="pageSize != null and start != null ">
            limit #{start},#{pageSize}
        </if>
    </select>
    <!-- 获取role列表的总量 -->
    <select id="rolesSize" resultType="Integer">
	    <![CDATA[
        select count(*)
        from oauth_role
        ]]>
	</select>
    <!-- 新建角色信息 -->
    <insert id="insertRole">
        insert into oauth_role (role, name, modules, `describe`)
        values (#{roleEntity.role}, #{roleEntity.name}, #{roleEntity.modules}, #{roleEntity.describe})
    </insert>
    <!-- 更新角色信息 -->
    <update id="updateRole">
        update oauth_role set
        role = #{roleEntity.role},
        name = #{roleEntity.name},
        modules =
        #{roleEntity.modules},
        `describe` =
        #{roleEntity.describe}
        <where>
            id = #{roleEntity.id}
        </where>
    </update>
    <!-- 删除角色信息 -->
    <delete id="deleteRoles">
        delete from oauth_role
        <where>
            <if test="groupId !=null">
                id in
                <foreach collection="groupId" item="item" index="index"
                         open="(" separator="," close=")">
                    #{item}
                </foreach>
            </if>
        </where>
    </delete>

    <insert id="insertUserRole">
        insert into oauth_user_role (user_id, role_id)
        values (#{userRoleEntity.userId}, #{userRoleEntity.roleId})
    </insert>

    <update id="updateUserRole">
        update oauth_user_role
        set role_id=#{userRoleEntity.roleId}
        <where>
            user_id=#{userRoleEntity.userId}
        </where>
    </update>

    <!-- 通过id得到Modules集合 -->
    <select id="getModulesById" resultType="String">
        select modules
        from oauth_role
        where id in (select role_id from oauth_user_role where user_id =
                                                           #{id})
    </select>
    <!-- 通过UserId得到对应的role -->
    <select id="getRolesByUserId" resultType="String">
        select `role`
        from oauth_role
        where id in (select role_id from oauth_user_role where user_id =
                                                           #{id})
    </select>
    <!-- 得到角色全部数据 -->
    <select id="allRoles" resultMap="roleMap">
        select *
        from oauth_role
    </select>
</mapper>